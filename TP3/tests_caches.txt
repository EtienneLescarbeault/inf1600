
   /* Test assembler function for transpose */
   transposeasm = matrix_create(matorder);
   matrix_transpose_asm(matdata, transposeasm, matorder);
   matrix_print("transpose (assembler function)", transposeasm, matorder);
   if(matrix_equals(transposec, transposeasm, matorder) == 1)
      printf("OK: transpose calculated with assembly function matches reference\n\n");
   else {
      printf("FAIL: transpose calculated with assembly function does not match reference\n\n");
      exit(1);
   }
   /* Test assembler function for diagonal */
   diagonalasm = matrix_create(matorder);
   matrix_diagonal_asm(matdata, diagonalasm, matorder);
   matrix_print("diagonal (assembler function)", diagonalasm, matorder);
   if(matrix_equals(diagonalc, diagonalasm, matorder) == 1)
      printf("OK: diagonal calculated with assembly function matches reference\n\n");
   else {
      printf("FAIL: diagoanl calculated with assembly function does not match reference\n\n");
      exit(1);
   }
   /* Test assembler function for multiplication */
   multipliedasm = matrix_create(matorder);
   matrix_multiply_asm(matdata, transposeasm, multipliedasm, matorder);
   matrix_print("original x transpose (assembler function)", multipliedasm, matorder);
   if(matrix_equals(multipliedc, multipliedasm, matorder) == 1)
      printf("OK: multiplication calculated with assembly function matches reference\n\n");
   else {
      printf("FAIL: multiplication calculated with assembly function does not match reference\n\n");
      exit(1);
   }
   /* Test assembler function for row average */
   rowavervectorasm = vector_create(matorder);
   matrix_row_aver_asm(matdata, rowavervectorasm, matorder);
   vector_print("average vector (assembler function)", rowavervectorasm, matorder);
   if(vector_equals(rowavervectorc, rowavervectorasm, matorder) == 1)
      printf("OK: average vector with assembly function matches reference\n\n");
   else {
      printf("FAIL: average vector calculated with assembly function does not match reference\n\n");
      exit(1);
   }
